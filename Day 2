Ingress -External Traffic Management
   What is Ingress? Ingress ek set of rules hota hai jo external HTTP/HTTPs traffic ke ander ke services tak route krne ke liye use hota hai, jab tumhare cluster ke ander multiple services chal rhi hoti hain (jase website, API, Admin panel) toh unko bahar se access 
                    krne ke liye hum ingress ka use krte hain. ye traffic ko control krne ka ek central point provide krta hai. use suppose you have multiple services (like service1, service2) running in your cluster. Instaed of exposing each via NodePort or 
                    LoadBalancer, you use a single Ingress Controller  + Ingress rules to manage routing.
   Functions:
   a) Traffic Routing: Incoming traffic ko different services me route krna based on URL paths ya hostnames.
   b) TLS/SSL Termination: Secure connection (HTTPS) establish krna aur certificate management handle krna.
   c) LoadBalancing : Traffic ko distribute krna across multiple backend services.
   d) URL Rewrite/Redirection: Advance routing rules, jase URL rewrites, implement krna.
Ingress Controller: Ingress Controller ek software hota hai (jase nginx , Traefik), jo ingress rules ko padhta hai aur unke according request forward krta hai. 
 Popular Ingress Controllers:
  * NGINX ingress Controller
  * Traefik
  * HAProxy
  * Istio (as gateway)
    Step 1 : Start Minikube (with Ingress addon)
     minikube start
     minikube addon enable ingress
    Step 2 : Check if Ingress controller is running
     kubectl get pods -n ingress-nginx >>>>>>>>>>>>>>>>>>>>>To check if ingress controller ke pods  sahi se ban gye hain ya nahi.
     kubectl get svc -n ingress-nginx >>>>>>>>>>>>>>>>>>>>>>To check  if ingress controller ke services sahi se ban gye hain ya nahi.
    Step 3 : Ingress la YAML banao
    apiversion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      name: hello-world-ingress
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
    spec:
    rules:
    - host: hello-world.local
      http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: hello-world
            port:
            number:8080

     Step 4 : YAML file apply karo
    kubectl apply -f ingress.yaml

    Step 5 : /etc/hosts me entry add kro
    sudo nano /etc/hosts
    usme yeh line add kro
    <minikube-ip> hello-world.local >>>> yeh step jaruri hai taki browser ya curl samjh sake ki hello-world.local ka mtlb tumhara Minikube IP hai.
    minikube ka IP nikalne ke liye
    minikube ip
    Step :6 Test kro
    curl http://hello-world.local   yeh browser me khol lo
    http://hello-world.local
    
Kubernetes Job
kya hai Job ? 
Job ek kubernetes resource hai jo ek ya jyada pods ko run krwata hai taki ek perticular task complete ho sake.
job tab tak run hote hai jab tak tak complete (ya successful exit) na ho jaye.
yeh ek single-run task ke liye hota hai, jo ya toh successful complete hoga ya fr error aayega.
use case: 
  Batch processing tasks, Data processing ya migration scripts, one time tasks jo complete hone pr fr se run nhi krne.
Step-1   Simple yaml file for job
  apiVersion: batch/v1
  kind: Job
  metadata:
    name:hello-job
  spec:
    template:
      spec:
        containers:
        -name: hello
         image: busybox
         command: ["echo", "Hello from kubernetes Job"]
      restartPolicy: Onfailure
 Step 2: kubectl applu -f job.yaml
 Step 3: kubectl get jobs
         kubectl get pods --watch
 step 4: kubectl logs <pod-name>

 Kubernetes CronJob
 what is a Cronjob: its a kubernetes resource which run jobs at regular interval. aise task ke liye kam krta hai jo periodic hone chahiye like Daily backups, Scheduled reports , Periodic cleanup tasks.
 CronJob YAML me apko do cheezen specify krni hoti hain.
 1. Schedule: Jab app chahte ho ke job run ho (cron expression).
 2. Job Template: Jo job run hoga, uska template define krna.
    apiVersion: batch/v1
    kind: CronJob
    metadata:
      name: hello-cron
    spec:
      schedule: "*/1 * * * *"
      jobTemplate:
        spec:
        template:
          spec:
           containers:
           - name:hello
             image: busybox
            command: ["echo", "Hello from CronJob"]
          restartPolicy: OnFailure
    3.iss file ko Cronjob.yaml se save kro >>>>>>>>> kubectl apply -f cronjob.yaml
    4. CronJob status aur schedule krne ke liye >>>>>kubectl get cronjob

